<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/cache
	http://www.springframework.org/schema/cache/spring-cache-3.1.xsd">
	
	<!-- JDBC参数配置 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" lazy-init="true">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>

	<!-- 数据源配置 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<!-- 设置JDBC驱动名称 -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<!-- 设置JDBC连接URL -->
		<property name="url" value="${jdbc.url}" />
		<!-- 设置数据库用户名 -->
		<property name="username" value="${jdbc.username}" />
		<!-- 设置数据库密码 -->
		<property name="password" value="${jdbc.password}" />
		<!-- 设置连接池初始值 -->
		<property name="initialSize" value="5" />
		<!-- 设置连接池最大值 -->
		<property name="maxActive" value="100" />
		<!-- 设置连接池最小空闲值 -->
		<property name="minIdle" value="20" />
		<!-- 设置连接池最大空闲值 -->
		<property name="maxIdle" value="50" />
	</bean>

	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 配置Hibernate拦截器,自动填充数据的插入、更新时间 -->
		<property name="entityInterceptor" ref="entityInterceptor" />
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.zg.entity"></property> 
		<property name="hibernateProperties">
			<value>
				<!-- 设置数据库方言 -->
				hibernate.dialect=${hibernate.dialect}
				<!-- 设置自动创建|更新|验证数据库表结构 -->
				hibernate.hbm2ddl.auto=update
				<!-- 输出SQL语句到控制台 -->
				hibernate.show_sql=${hibernate.show_sql}
				<!-- 格式化输出到控制台的SQL语句 -->
				hibernate.format_sql=${hibernate.format_sql}
				<!-- 是否开启二级缓存 -->
				hibernate.cache.use_second_level_cache=false
				<!-- 配置二级缓存产品 -->
				hibernate.cache.region.factory_class=org.hibernate.cache.EhCacheRegionFactory
				<!-- 是否开启查询缓存 -->
				hibernate.cache.use_query_cache=false
				<!-- 数据库批量查询数 -->
				hibernate.jdbc.fetch_size=50
				<!-- 数据库批量更新数 -->
				hibernate.jdbc.batch_size=30
				
				net.sf.ehcache.configurationResourceName=ehcache.xml
				
				hibernate.search.default.directory_provider=filesystem
				
				hibernate.search.default.indexBase=${hibernate.search.indexBase}
				
				
			</value>
		</property>
		<!--  
		<property name="annotatedClasses">
			<list>
				<value>com.zg.entity.Area</value>
				<value>com.zg.entity.LogConfig</value>
				<value>com.zg.entity.Log</value>
				<value>com.zg.entity.Admin</value>
				<value>com.zg.entity.Role</value>
				<value>com.zg.entity.Resource</value>
				<value>com.zg.entity.MemberRank</value>
				<value>com.zg.entity.Member</value>
				<value>com.zg.entity.MemberAttribute</value>
				<value>com.zg.entity.Receiver</value>
				<value>com.zg.entity.ProductCategory</value>
				<value>com.zg.entity.Product</value>
				<value>com.zg.entity.ProductType</value>
				<value>com.zg.entity.ProductAttribute</value>
				<value>com.zg.entity.Brand</value>
				<value>com.zg.entity.Navigation</value>
				<value>com.zg.entity.ArticleCategory</value>
				<value>com.zg.entity.Article</value>
				<value>com.zg.entity.FriendLink</value>
				<value>com.zg.entity.Footer</value>
				<value>com.zg.entity.Agreement</value>
				<value>com.zg.entity.Message</value>
				<value>com.zg.entity.CartItem</value>
				<value>com.zg.entity.PaymentConfig</value>
				<value>com.zg.entity.Deposit</value>
				<value>com.zg.entity.Payment</value>
				<value>com.zg.entity.Refund</value>
				<value>com.zg.entity.Shipping</value>
				<value>com.zg.entity.Reship</value>
				<value>com.zg.entity.DeliveryType</value>
				<value>com.zg.entity.DeliveryCorp</value>
				<value>com.zg.entity.DeliveryItem</value>
				<value>com.zg.entity.Order</value>
				<value>com.zg.entity.OrderItem</value>
				<value>com.zg.entity.OrderLog</value>
			</list>
		</property>
		-->
	</bean>

 	
	<!-- 设置需要进行Spring注解扫描的类包 -->
	<context:component-scan base-package="com.zg" />
	<!-- 使用AspectJ方式配置AOP -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<aop:config proxy-target-class="true" />
	
	<!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->
	<cache:annotation-driven cache-manager="cacheManager"/>
	
	<!-- cacheManager工厂类，指定ehcache.xml的位置 -->
	<bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" 
		p:configLocation="classpath:/ehcache.xml" />
	<!-- 声明cacheManager --> 
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"   
    	p:cacheManager-ref="cacheManagerFactory" />
	

	<!-- 使用注解方式定义事务 -->
	<tx:annotation-driven proxy-target-class="true" transaction-manager="transactionManager" />

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- 配置HibernateSearchTemplate -->
	<bean id="hibernateSearchTemplate" class="com.zg.search.HibernateSearchTemplate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置事务传播特性 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置哪些类的哪些方法参与事务 -->
	<aop:config>
		<aop:advisor pointcut="execution(* com.zg.service..*.*(..))" advice-ref="transactionAdvice" />
		<aop:advisor pointcut="execution(* com.zg.security..*.*(..))" advice-ref="transactionAdvice" />
	</aop:config>

	<!-- 配置freemarkerManager -->
	<bean id="freemarkerManager" class="org.apache.struts2.views.freemarker.FreemarkerManager" />

	<!-- 配置JCaptcha验证码功能 -->
	<bean id="captchaService" class="com.octo.captcha.service.image.DefaultManageableImageCaptchaService">
		<property name="captchaEngine">
			<bean class="com.zg.common.JCaptchaEngine" />
		</property>
		<!-- 验证码过期时间 -->
		<property name="minGuarantedStorageDelayInSeconds" value="600" />
	</bean>

	<!-- 重建索引配置 -->
	<bean id="indexBuilder" class="com.zg.common.HibernateSearchIndexBuilder">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="lazyTime" value="30" />
	</bean>
	
	<!-- SMTP邮件服务配置 -->
	<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.timeout">25000</prop>
				<!-- SSL连接配置 -->
				<!--
				<prop key="mail.smtp.starttls.enable">true</prop>  
				<prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
				-->
			</props>
		</property>
	</bean>
	
	<!-- SMTP邮件异步发送 -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数 -->
		<property name="corePoolSize" value="10" />
		<!-- 最大线程数 -->
		<property name="maxPoolSize" value="50" />
		<!-- 最大队列数 -->
		<property name="queueCapacity" value="10000" />
		<!-- 线程池维护线程所允许的空闲时间 -->
		<property name="keepAliveSeconds" value="60" />
	</bean>
	
</beans>